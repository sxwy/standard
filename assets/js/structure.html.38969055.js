"use strict";(self.webpackChunk_sxwy_standard_docs=self.webpackChunk_sxwy_standard_docs||[]).push([[127],{824:(n,s,e)=>{e.r(s),e.d(s,{comp:()=>d,data:()=>p});var a=e(149);const i=(0,a.Fv)('<h1 id="组织结构" tabindex="-1"><a class="header-anchor" href="#组织结构"><span>组织结构</span></a></h1><p><img src="/standard/images/rules_project_structure_schema.jpg" alt="structure.jpg"></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── dist <span class="token comment">####################################### 构建输出路径</span>\n├── mock <span class="token comment">####################################### 接口模拟配置</span>\n├── public <span class="token comment">##################################### 静态资源（非打包）</span>\n├── src <span class="token comment">######################################## 源代码</span>\n│   ├── api <span class="token comment">#################################### 网络请求层</span>\n│   ├── assets <span class="token comment">################################# 全局公共资源（打包）</span>\n│   │   ├── images <span class="token comment">############################# 图片资源</span>\n│   │   │   └── 模块_类别_功能_状态.扩展名\n│   │   └── fonts <span class="token comment">############################## 字体资源</span>\n│   ├── components <span class="token comment">############################# 全局公共组件</span>\n│   ├── config <span class="token comment">################################# 全局配置</span>\n│   ├── hooks <span class="token comment">################################## 全局公共 Hooks</span>\n│   ├── pages/views <span class="token comment">############################ 路由页面</span>\n│   │   ├── xxx <span class="token comment">################################ 业务模块</span>\n│   │   │   ├── xxx1 <span class="token comment">########################### 业务组件子模块 1</span>\n│   │   │   ├── xxx2 <span class="token comment">########################### 业务组件子模块 2</span>\n│   │   │   └── xxx3 <span class="token comment">########################### 业务组件子模块 3</span>\n│   │   ├── yyy <span class="token comment">################################ 业务模块</span>\n│   │   └── zzz <span class="token comment">################################ 业务模块</span>\n│   ├── <span class="token function">service</span> <span class="token comment">################################ 业务逻辑层</span>\n│   ├── store <span class="token comment">################################## 全局状态管理</span>\n│   ├── types <span class="token comment">################################## 全局公共类型</span>\n│   ├── utils <span class="token comment">################################## 全局公共工具</span>\n│   ├── global.d.ts <span class="token comment">############################ 全局类型定义</span>\n│   └── main.ts <span class="token comment">################################ 应用入口</span>\n├── .editorconfig <span class="token comment">############################## 编辑器通用配置</span>\n├── .eslintrc.js <span class="token comment">############################### JS 审查配置</span>\n├── .gitignore <span class="token comment">################################# 版本管理配置</span>\n├── .npmrc <span class="token comment">##################################### 依赖管理配置</span>\n├── .prettierrc.js <span class="token comment">############################# 代码格式化配置</span>\n├── .stylelintrc.js <span class="token comment">############################ 样式审查配置</span>\n├── README.md <span class="token comment">################################## 项目开发说明</span>\n├── babel.config.js <span class="token comment">############################ 编译配置</span>\n├── package-lock.json <span class="token comment">########################## 依赖版本锁</span>\n├── package.json <span class="token comment">############################### 项目配置</span>\n└── tsconfig.json <span class="token comment">############################## TypeScript 配置</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态资源-非打包" tabindex="-1"><a class="header-anchor" href="#静态资源-非打包"><span>静态资源（非打包）</span></a></h2><p><code>./public/</code> 用于放置非打包的静态资源，例如：HTML 模板、图片和字体等素材。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── <span class="token punctuation">..</span>.\n├── public <span class="token comment">##################################### 静态资源（非打包）</span>\n│   ├── static <span class="token comment">################################# 静态资源</span>\n│   │   ├── styles <span class="token comment">############################# 样式资源</span>\n│   │   ├── fonts <span class="token comment">############################## 字体资源</span>\n│   │   ├── images <span class="token comment">############################# 图片资源</span>\n│   │   └── sctipts <span class="token comment">############################ 脚本资源</span>\n│   └── index.html <span class="token comment">############################# HTML 模板</span>\n└──\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps：一般静态资源都需要放在源代码中作为模块依赖引入，在使用前端工具构建打包后会进行自动优化（较小的资源转成 base64，较大的资源以源文件的形式拷贝到输出目录，且在资源文件名后追加 hash 值，所以和源代码里面的资源主要区别在于文件是否版本化管理了）。如果需要在代码里配置静态资源的访问路径，那么就可以把静态资源放在 <code>./public/</code> 目录下，然后拼上站点地址即可访问图片，例如一些需要配置传给客户端的图标资源和分享图片。</p><h2 id="源代码" tabindex="-1"><a class="header-anchor" href="#源代码"><span>源代码</span></a></h2><p><code>./src/</code> 用于放置源代码，其根目录下主要放置一些全局公共模块，除此之外是业务模块一般放在路由目录下，通常命名为 pages 或 views。</p><h3 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求"><span>网络请求</span></a></h3><p>网络请求层封装了不同域名或服务的网络请求实例，一般统一以域名维度划分且命名为 <code>xxxApi</code>，如果有些特定的服务需要特殊的拦截器和配置，那么可以按服务命名，例如 <code>memberApi</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src\n│   ├── api <span class="token comment">##################################### 网络请求层</span>\n│   │   ├── baseApi <span class="token comment">############################# https://api.host.cn</span>\n│   │   ├── xxxApi <span class="token comment">############################## https://xxx-api.host.cn</span>\n│   │   ├── yyyApi <span class="token comment">############################## https://yyy-api.host.cn</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps：类似接口模拟配置，建议按下面的统一方式命名。</p><ul><li>baseApi：https://api.host.cn</li><li>xxxApi：https://xxx-api.host.cn</li><li>yyyApi：https://yyy-api.host.cn</li></ul><h3 id="公共资源" tabindex="-1"><a class="header-anchor" href="#公共资源"><span>公共资源</span></a></h3><p>公共资源目录放置了全局可复用的静态资源，静态资源一把命名为 <code>模块_类别_功能_状态.扩展名</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src\n│   ├── api <span class="token comment">#################################### 网络请求层（封装了各个域名的请求工具哈数）</span>\n│   ├── assets <span class="token comment">################################# 静态资源目录（打包）</span>\n│   │   ├── images <span class="token comment">############################# 图片资源</span>\n│   │   │   └── 模块_类别_功能_状态.扩展名\n│   │   └── fonts <span class="token comment">############################## 字体资源</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="公共组件" tabindex="-1"><a class="header-anchor" href="#公共组件"><span>公共组件</span></a></h3><p>公共组件层目录封装了全局通用的可复用组件，一般采用大驼峰命名法，例如 <code>Xyz</code>（个别技术栈需要区分命名，例如：uni-app 一般以 <code>c-</code> 作为前缀，统一使用小写字母，多个单词使用连字符号）。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src\n│   ├── components <span class="token comment">############################# 公共组件目录</span>\n│   │   ├── Xxx <span class="token comment">################################ 公共组件模块</span>\n│   │   │   └── index.js\n│   │   ├── Yyy <span class="token comment">################################ 公共组件模块</span>\n│   │   │   └── index.js\n│   │   └── index <span class="token comment">############################## 输出路径</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="公共配置" tabindex="-1"><a class="header-anchor" href="#公共配置"><span>公共配置</span></a></h3><p>公共配置层封装了全局公共的常量配置，其下的模块一般以小驼峰，一般以大写字母和下划线命名的变量形式输出。如果常量配置较多，可以按功能进行划分，例如：页面相关的变量放在 page 模块，站点地址相关的常量放在 site 目录下，其他不确定的统一放 constants 模块下。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src\n│   ├── config <span class="token comment">################################# 全局配置目录</span>\n│   │   ├── constants <span class="token comment">########################## 不确定模块的常量配置</span>\n│   │   ├── page <span class="token comment">############################### 页面路由相关的常量配置</span>\n│   │   └── site <span class="token comment">############################### 站点地址相关的常量配置</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="公共-hooks" tabindex="-1"><a class="header-anchor" href="#公共-hooks"><span>公共 Hooks</span></a></h3><p>公共 Hooks 目录主要针对 Hook API 的 react 和 vue 等框架，封装了全局公共的 Hook，一般命名为 <code>useXyz</code>。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\n```shell\n├── src\n│   ├── hooks ################################## 全局公共 Hooks 目录\n│   │   └── useXyz\n├── ...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由页面-业务模块" tabindex="-1"><a class="header-anchor" href="#路由页面-业务模块"><span>路由页面（业务模块）</span></a></h3><p>路由页面目录一般按业务模块进行划分（禁止按 UI 状态划分），模块目录以小写字母和连字符号组成，一般子路径等价于路由注册路径。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src\n│   ├── pages/views <span class="token comment">############################ 路由页面目录</span>\n│   │   ├── xxx <span class="token comment">################################ 业务模块目录</span>\n│   │   │   ├── xxx-1 <span class="token comment">########################### 业务子模块 1</span>\n│   │   │   ├── xxx-2 <span class="token comment">########################### 业务子模块 2</span>\n│   │   │   ├── components <span class="token comment">##################### 业务模块公共组件目录</span>\n│   │   │   │   ├── Xxx <span class="token comment">######################## 公共组件模块</span>\n│   │   │   │   │   └── index.js\n│   │   │   │   ├── Yyy <span class="token comment">######################## 公共组件模块</span>\n│   │   │   │   │   └── index.js\n│   │   │   │   └── index <span class="token comment">###################### 输出路径</span>\n│   │   │   ├── images <span class="token comment">########################## 业务模块公共工具目录</span>\n│   │   │   ├── utils <span class="token comment">########################## 业务模块公共工具目录</span>\n│   │   │   ├── index.<span class="token punctuation">{</span>tsx<span class="token operator">|</span>vue<span class="token punctuation">}</span> <span class="token comment">################ 业务模块入口页面</span>\n│   │   │   ├── list.<span class="token punctuation">{</span>tsx<span class="token operator">|</span>vue<span class="token operator">|</span> <span class="token comment">################# 业务模块列表页面</span>\n│   │   │   ├── detail.<span class="token punctuation">{</span>tsx<span class="token operator">|</span>vue<span class="token punctuation">}</span> <span class="token comment">############### 业务模块详情页面</span>\n│   │   │   ├── service.ts <span class="token comment">##################### 业务模块业务逻辑实现</span>\n│   │   │   └── type.ts <span class="token comment">######################## 业务模块类似定义</span>\n│   │   ├── yyy <span class="token comment">################################ 业务员模块目录</span>\n│   │   └── zzz <span class="token comment">################################ 业务员模块目录</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要点：</p><ol><li><p>路由页面目录一定要按业务模块划分，不能以产品原型或设计的布局划分。</p><p>产品原型和设计一般变化频率较高，一个位置今天可能显示模块 A，明天可能显示模块 B。如果按显示去划分子目录，后期应对变化的扩展性会变得很差。此外，编码过程中一定要遵循低耦合高内聚的原则，同一个业务模块的功能应该放在同一个目录下，方便代码的重用和解耦。</p></li><li><p>模块目录和路由组件要以小写字母和连字符号命名，主要目的是为了区分非路由目录和组件，更加方便维护者知晓当前模块下有哪些路由，以及跟进路由快速定位源代码；</p></li><li><p>除了路由组件外，其他的代码按功能可以划分为 components、utils、service 和 type</p><ul><li>components：该业务模块下可复用的公共组件</li><li>images：该业务模块下可复用的公共组件</li><li>utils：该业务模块下可复用的公共工具函数</li><li>service：该业务模块下的业务接口请求逻辑封装</li><li>type：该业务模块下的公共数据（业务和 UI 状态）类型</li></ul></li><li><p>模块可以互相嵌套，一个大模块下面包含多个子模块，子模块相关的实现放在主模块的子目录下。</p></li></ol><p>ps：路由页面不仅仅是放置路由组件的，更应该是当做业务模块目录，不同业务模块的公共组件和 API 就应该放在该路由下的模块目录里，而不是全部都放在全局目录下。此外，如果有模块之间需要相互引用公共组件，如果该组件跟业务无关，那么可以提取到全局目录下，否则不允许路由模块之间的相互引用。</p>',32),l={href:"/guide/project/structure-in-action.html",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Fv)('<h3 id="业务逻辑层" tabindex="-1"><a class="header-anchor" href="#业务逻辑层"><span>业务逻辑层</span></a></h3><p>业务逻辑层封装了全局可复用的业务逻辑(服务端的接口请求)，其下的文件按业务模块划分，一般命名为 <code>xxxService</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src\n│   ├── <span class="token function">service</span> <span class="token comment">################################ 业务逻辑层</span>\n│   │   ├── abtestService.ts <span class="token comment">################### AB 测试相关的公共业务逻辑</span>\n│   │   ├── memberService.ts <span class="token comment">################### 会员相关的公共业务逻辑</span>\n│   │   └── userService.ts <span class="token comment">##################### 用户相关的公共业务逻辑</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要点：业务逻辑层主要是针对服务端接口调用的封装，需要在每个方法上提供好相关的接口文档链接、入参和返回说明。此外，在一些复杂的业务场景下需要组合多个接口调用，以及对接口返回值进行封装处理，统一业务数据模型。</p><h3 id="全局状态管理" tabindex="-1"><a class="header-anchor" href="#全局状态管理"><span>全局状态管理</span></a></h3><p><code>./src/store</code> 封装了全局状态管理模块。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src <span class="token comment">######################################## 源代码</span>\n│   ├── store <span class="token comment">################################## 全局状态管理</span>\n│   │   ├── user.ts <span class="token comment">############################ 用户管理模块</span>\n│   │   └── index.ts <span class="token comment">########################### 对外输出模块</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="公共类型层" tabindex="-1"><a class="header-anchor" href="#公共类型层"><span>公共类型层</span></a></h3><p><code>./src/types</code> 封装了全局公共的业务类型（类似于服务端的数据表实体），一般以业务模块划分供全局使用，也方便维护者快速熟悉业务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── src <span class="token comment">######################################## 源代码</span>\n│   ├── store <span class="token comment">################################## 全局状态管理</span>\n│   │   ├── member.ts <span class="token comment">########################## 会员业务类型</span>\n│   │   ├── user.ts <span class="token comment">############################ 用户业务类型</span>\n│   │   └── index.ts <span class="token comment">########################### 对外输出模块</span>\n├── <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要点：业务类型指的是跟业务相关的数据结构类型（使用 TS interface 定义），例如：会员模块相关的业务类型有会员卡类型，用户模块相关的业务类型有用户个人信息类型，用户会员信息类型等。不同的业务模块类型可以相互引用。</p><h3 id="公共工具层" tabindex="-1"><a class="header-anchor" href="#公共工具层"><span>公共工具层</span></a></h3><p><code>./src/utils</code> 主要放置全局可复用的一些工具函数。</p>',13),t={},d=(0,e(890).A)(t,[["render",function(n,s){const e=(0,a.g2)("ExternalLinkIcon");return(0,a.uX)(),(0,a.CE)("div",null,[i,(0,a.Lk)("p",null,[(0,a.eW)("参考："),(0,a.Lk)("a",l,[(0,a.eW)("项目结构优化实战"),(0,a.bF)(e)])]),c])}]]),p=JSON.parse('{"path":"/rules/project/structure.html","title":"组织结构","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"静态资源（非打包）","slug":"静态资源-非打包","link":"#静态资源-非打包","children":[]},{"level":2,"title":"源代码","slug":"源代码","link":"#源代码","children":[{"level":3,"title":"网络请求","slug":"网络请求","link":"#网络请求","children":[]},{"level":3,"title":"公共资源","slug":"公共资源","link":"#公共资源","children":[]},{"level":3,"title":"公共组件","slug":"公共组件","link":"#公共组件","children":[]},{"level":3,"title":"公共配置","slug":"公共配置","link":"#公共配置","children":[]},{"level":3,"title":"公共 Hooks","slug":"公共-hooks","link":"#公共-hooks","children":[]},{"level":3,"title":"路由页面（业务模块）","slug":"路由页面-业务模块","link":"#路由页面-业务模块","children":[]},{"level":3,"title":"业务逻辑层","slug":"业务逻辑层","link":"#业务逻辑层","children":[]},{"level":3,"title":"全局状态管理","slug":"全局状态管理","link":"#全局状态管理","children":[]},{"level":3,"title":"公共类型层","slug":"公共类型层","link":"#公共类型层","children":[]},{"level":3,"title":"公共工具层","slug":"公共工具层","link":"#公共工具层","children":[]}]}],"git":{"updatedTime":1712907530000,"contributors":[{"name":"chenjie","email":"chenjie@szy.cn","commits":1}]},"filePathRelative":"rules/project/structure.md"}')}}]);